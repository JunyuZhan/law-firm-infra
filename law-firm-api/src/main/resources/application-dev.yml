spring:
  # 全局属性 - 开发环境数据库名称覆盖
  database:
    name: law_firm
  # 开发环境数据源 - 可以使用H2内存数据库方便开发
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/${spring.database.name}?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
    username: root
    # 使用环境变量设置密码
    password: ${MYSQL_PASSWORD:}
    # 数据库名称配置 - 使用全局变量
    database-name: ${spring.database.name}
    hikari:
      # 开发环境连接池配置
      minimum-idle: 5
      maximum-pool-size: 20
      connection-test-query: SELECT 1
      # 自动注册JMX监控
      register-mbeans: true

  # 启用调试模式，查看自动配置报告
  debug: true

  # 开发环境Redis配置 - 保持与生产环境一致的功能
  data:
    redis:
      host: localhost
      port: 6379
      # 如果没有Redis，可以使用embedded模式
      # 注意：需要添加embedded-redis依赖
      database: 0
      # 禁用repositories但保留Redis功能
      repositories:
        enabled: true
  
  # 开发环境自动初始化数据库
  flyway:
    enabled: true
    clean-disabled: true  # 防止意外清空数据库
    # 开启验证和自动迁移，与生产环境保持一致
    validate-on-migrate: true
    auto-migrate: true
    # 允许乱序执行，便于开发
    out-of-order: true
    # 基线版本
    baseline-version: 1
    # 错误时继续
    ignore-migration-patterns: "*:missing"

  # 任务执行器配置
  task:
    execution:
      enabled: true
      pool:
        core-size: 5
        max-size: 10
        queue-capacity: 100
        thread-name-prefix: app-task-
  
  # 文件上传配置
  servlet:
    multipart:
      max-file-size: 20MB
      max-request-size: 20MB

# 开发环境服务器配置
server:
  port: 8080
  servlet:
    context-path: /
    encoding:
      charset: UTF-8
      force: true
      enabled: true
  tomcat:
    uri-encoding: UTF-8

# 开发环境允许本地开发域名跨域
cors:
  allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:5666,https://localhost:5666,http://192.168.50.101:5666,https://localhost:8000,https://localhost:8080,https://localhost:3000,https://127.0.0.1:5666,http://127.0.0.1:5666,https://127.0.0.1:8000,https://127.0.0.1:3000}
  use-wildcard: true

# 开发环境API文档配置
springdoc:
  api-docs:
    enabled: true
  swagger-ui:
    enabled: true
    try-it-out-enabled: true
    filter: true
  show-actuator: true

# 开发环境Knife4j配置  
knife4j:
  enable: true
  production: false

# 日志级别配置
logging:
  level:
    root: INFO
    com.lawfirm: DEBUG
    org.springframework: INFO
    org.springframework.security: DEBUG
    org.springframework.cache: INFO
    com.baomidou.mybatisplus: DEBUG
    org.flywaydb: DEBUG
    # API文档相关日志配置已移除
    org.apache.ibatis: INFO
    org.mybatis.spring: INFO

# 开发环境权限系统配置
law-firm:
  permission:
    # 开发环境可选择性启用权限验证
    validate: ${PERMISSION_VALIDATE:false}
    cache:
      # 开发环境启用缓存但使用较短的过期时间便于调试
      enabled: ${PERMISSION_CACHE_ENABLED:true}
      ttl: ${PERMISSION_CACHE_TTL:600}  # 10分钟
      max-size: ${PERMISSION_CACHE_MAX_SIZE:5000}
    management:
      # 开发环境启用权限管理功能便于测试
      enabled: ${PERMISSION_MANAGEMENT_ENABLED:true}
  
  # 开发环境安全配置
  security:
    # 开发环境可以保留模拟用户，但在预发布环境禁用
    mock-user:
      enabled: true
      username: admin
      role: ROLE_ADMIN
    # 启用安全限制，与生产环境保持一致
    disable:
      csrf: false
      xss-filter: true
    # 开发环境启用密码解密（可选配置）
    db-password:
      enabled: false
      secret-key: DevSecretKey
  
  # 开发环境核心模块配置 - 确保所有模块都启用
  core:
    workflow:
      enabled: true
    storage:
      enabled: true
      manager-class: com.lawfirm.core.storage.manager.DefaultStorageManager
      local:
        root-path: ./storage
    search:
      enabled: true
      searchEngineType: database
      index-path: ./indices
    audit:
      enabled: true
      
  # 开发环境日志模块配置
  common:
    log:
      enabled: true
      method-log: true
      log-request-params: true
      executor:
        bean-name: taskExecutor
      
    # 开发环境数据库配置
    data:
      enabled: true
      module-init-enabled: true
      system-database: ${spring.database.name}
      # 数据库监控
      monitoring:
        enabled: true
        performance:
          enabled: true

  # 开发环境OnlyOffice配置
  onlyoffice:
    enabled: ${ONLYOFFICE_ENABLED:true}
    url: ${ONLYOFFICE_URL:http://localhost:8088}
    secret: ${ONLYOFFICE_SECRET:lawfirm-onlyoffice-jwt-secret-dev}
    header: ${ONLYOFFICE_HEADER:Authorization}
    callback-url: ${ONLYOFFICE_CALLBACK_URL:http://localhost:8080/api/v1/documents/onlyoffice/callback}
    max-file-size: ${ONLYOFFICE_MAX_FILE_SIZE:52428800}  # 50MB
    edit-timeout: ${ONLYOFFICE_EDIT_TIMEOUT:60}  # 60分钟
    supported-formats:
      - doc
      - docx
      - odt
      - rtf
      - txt
      - xls
      - xlsx
      - ods
      - csv
      - ppt
      - pptx
      - odp
    co-edit:
      enabled: ${ONLYOFFICE_COEDIT_ENABLED:true}
      max-users: ${ONLYOFFICE_COEDIT_MAX_USERS:5}  # 开发环境限制用户数
      auto-save-interval: ${ONLYOFFICE_COEDIT_AUTO_SAVE_INTERVAL:30}  # 30秒

# 健康检查配置 - 启用必要的检查
management:
  endpoint:
    health:
      show-details: always
      show-components: always
      validate-group-membership: true
  health:
    # 启用主要服务的健康检查
    db:
      enabled: true
    diskspace:
      enabled: true
    # 根据实际使用情况决定是否启用Redis
    redis:
      enabled: true
    # 禁用不需要的服务健康检查
    ldap:
      enabled: false
    mail:
      enabled: false
    rabbit:
      enabled: false
    defaults:
      enabled: true

# MyBatis Plus开发环境配置 
mybatis-plus:
  configuration:
    # 生产日志级别使用Slf4j
    log-impl: org.apache.ibatis.logging.slf4j.Slf4jImpl
    # 开启注解扫描
    use-generated-keys: true
    default-statement-timeout: 60
    map-underscore-to-camel-case: true
  # 添加Mapper接口扫描包路径
  mapper-locations: classpath*:/mapper/**/*.xml
  # 确保实体类包被扫描
  type-aliases-package: com.lawfirm.model
  # 配置Mapper扫描包
  mapper-scan-package: com.lawfirm.model.**.mapper
  # 实体类父类包配置
  super-entity: com.lawfirm.model.base.entity.BaseEntity
  # 启用全局ID类型为AUTO
  global-config:
    banner: false
    db-config:
      id-type: auto
      logic-delete-field: deleted
      logic-delete-value: 1
      logic-not-delete-value: 0

# OCR配置
ocr:
  # 百度OCR配置
  baidu:
    app-id: ${BAIDU_OCR_APP_ID:your_app_id}
    api-key: ${BAIDU_OCR_API_KEY:your_api_key}
    secret-key: ${BAIDU_OCR_SECRET_KEY:your_secret_key}
  
  # 腾讯OCR配置
  tencent:
    secret-id: ${TENCENT_OCR_SECRET_ID:your_secret_id}
    secret-key: ${TENCENT_OCR_SECRET_KEY:your_secret_key}
    region: ${TENCENT_OCR_REGION:ap-beijing}
  
  # 阿里云OCR配置
  aliyun:
    access-key-id: ${ALIYUN_OCR_ACCESS_KEY_ID:your_access_key_id}
    access-key-secret: ${ALIYUN_OCR_ACCESS_KEY_SECRET:your_access_key_secret}
    endpoint: ${ALIYUN_OCR_ENDPOINT:ocr.cn-shanghai.aliyuncs.com}
